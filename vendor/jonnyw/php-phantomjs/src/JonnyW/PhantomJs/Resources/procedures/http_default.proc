
[% autoescape false %]
{% autoescape false %}

/**
 * Set up page and script parameters
 */
var page       = require('webpage').create(),
    system     = require('system'),
    response   = {},
    debug      = [],
    logs       = [],
    procedure  = {},
    resources  = 0,
    timeout;
	var urls=[];

/**
 * Global variables
 */
[[ engine.load('global_variables') ]]

/**
 * Define width & height of capture
 */
[[ engine.load('page_clip_rect') ]]

/**
 * Define paper size.
 */
[[ engine.load('page_paper_size') ]]

/**
 * Define viewport size.
 */
[[ engine.load('page_viewport_size') ]]


/**
 * Define custom headers.
 */
[[ engine.load('page_custom_headers') ]]

/**
 * Page settings
 */
[[ engine.load('page_settings') ]]

/**
 * On resource timeout
 */
page.onResourceTimeout = function (error) {
    [[ engine.load('page_on_resource_timeout') ]]
};

/**
 * On resource requested
 */
page.onResourceRequested = function (req) {
    
    [[ engine.load('page_on_resource_requested') ]]
    urls.push(req.url);
    resources++;
    window.clearTimeout(timeout);
};

/**
 * On resource received
 */
page.onResourceReceived = function (res) {
    
    var resource = res; // To be removed in version 5.0
    
    [[ engine.load('page_on_resource_received') ]]
    
    if(!res.stage || res.stage === 'end') {
        
        resources--;
        
        if (resources === 0) {
            
            timeout = window.setTimeout(function() {
                procedure.execute('success');
            }, 300);
        }
    }
};

/**
 * Handle page errors
 */
page.onError = function (msg, trace) {
    [[ engine.load('page_on_error') ]]
};

/**
 * Handle global errors
 */
phantom.onError = function(msg, trace) {
    [[ engine.load('phantom_on_error') ]]
};

/**
 * Open page
 */
page.open ('{{ input.getUrl() }}', '{{ input.getMethod() }}', '{{ input.getBody() }}', function (status) {
    [[ engine.load('page_body_styles') ]]
    response.shopOtherData = page.evaluate(function(){
	    var obj={
	    	shopName:document.querySelector('.name').innerHTML,
	    	collectCounter:document.querySelector('.collect-counter').innerHTML,
	    	logo:document.querySelector('.logo img').src,
	    	backImage:document.querySelector('.shop-back-img img').src,
	    };
    	return obj;
    });
    window.setTimeout(function () { 
        procedure.execute(status);
    }, {{ input.getTimeout() - 200 }});
});

/**
 * Execute procedure
 */
procedure.execute = function (status) {
	function Fn(url) {
		var arrData=[];
		var falg=false;
		for(var i=0;i<url.length;i++){
			if((url[i].indexOf('getitemdescx')>-1)){
				if(falg){
					var xhr = new XMLHttpRequest(); 
				    if(xhr){ 
			    		var urlToken=url[i];
				        xhr.onreadystatechange = function(){  
				            if(xhr.readyState == 4){  
				                if(xhr.status == 200){  
				                	arrData.push(xhr.response);
				                } 
				            }  
				        }  
				        xhr.open("GET", urlToken, false);  
				        xhr.withCredentials = true;
				        xhr.send(null);  
				    } 
				}
				falg=true;
			}
			
		}
        return  arrData;
    }
	var urldata = page.evaluate(Fn,urls);
    response.urldata = urldata;
    [[ engine.load( 'procedure_' ~ procedure_type ) ]]
};

{% endautoescape %}
[% endautoescape %]